{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1oZC-fF0Y1l8bkZKg0swJ2Qh1SL8e4M9c","timestamp":1718876021899},{"file_id":"1QvcMjmmcPvEOXmYVC4HgTbNvUyADGLdT","timestamp":1718867037284},{"file_id":"110TOs4JNlFRxX3dsnaLHiCAm9tN6jcrY","timestamp":1718867011431},{"file_id":"1Tuz0GBdhIdfbRs5jxAHSN7kkwVs9bRi0","timestamp":1715835075409},{"file_id":"1e90LQQXQ1n5ugUtNBweRh84ophGdbNFX","timestamp":1715661468073}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["### Mount the Drive"],"metadata":{"id":"GGF2CNT-vx7_"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8xgH9aJ6vsMm","executionInfo":{"status":"ok","timestamp":1718875015940,"user_tz":-330,"elapsed":27787,"user":{"displayName":"Shree krishna Ganguri","userId":"00482741206815251819"}},"outputId":"244f9875-1a36-4f0d-e1d5-181537b9f63d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","source":["### Load the CSV files\n","\n","- Please copy the paths of the generated CSVs."],"metadata":{"id":"3peN1O4wWu1P"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"xHIvtz3bUoGj"},"outputs":[],"source":["# define the paths\n","TRAIN_CSV = \"/content/drive/MyDrive/AIClub_AP_Shree_Krishna /CodeLab/Mosquito Project/Datasets/ExtractedFeature/mosquito_features_test.csv\"\n","TEST_CSV = \"/content/drive/MyDrive/AIClub_AP_Shree_Krishna /CodeLab/Mosquito Project/Datasets/ExtractedFeature/mosquito_features_train.csv\""]},{"cell_type":"code","source":["import pandas as pd\n","\n","# load the train csv\n","data_train = pd.read_csv(TRAIN_CSV)\n","data_train.head()"],"metadata":{"id":"q3UeS-qXZv5Q","colab":{"base_uri":"https://localhost:8080/","height":342},"executionInfo":{"status":"ok","timestamp":1718875135214,"user_tz":-330,"elapsed":2258,"user":{"displayName":"Shree krishna Ganguri","userId":"00482741206815251819"}},"outputId":"a9547bfd-b96d-468b-be53-da3a3a54da90"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        TEMPO  BEATS      RMSE  SPECTRAL_CENTROID  SPECTRAL_BANDWIDTH  \\\n","0    0.000000      0  0.000761        3300.212400         3175.473868   \n","1  117.453835      3  0.000850        1878.108104         2463.478567   \n","2   86.132812     16  0.000470        1006.429351          943.974019   \n","3  107.666016      4  0.000764        3259.906532         2694.057893   \n","4  117.453835     47  0.003900        2263.749841         2585.921411   \n","\n","       ROLLOFF  ZERO_CROSSING_RATE  MFCC_FEATURE0  MFCC_FEATURE1  \\\n","0  8182.617188            0.072591     -547.82650      61.259228   \n","1  4181.515255            0.051962     -587.12634     109.567670   \n","2  2163.357837            0.059460     -714.72750     160.035540   \n","3  6470.488281            0.163959     -562.85050      46.287365   \n","4  5826.431435            0.038568     -488.63882      97.426110   \n","\n","   MFCC_FEATURE2  ...  MFCC_FEATURE11  MFCC_FEATURE12  MFCC_FEATURE13  \\\n","0     -20.047228  ...       -6.872621      -10.328343        5.868352   \n","1       0.621466  ...       12.889715        7.382972        7.868042   \n","2     -27.784899  ...      -11.861855        5.109736       -0.966423   \n","3     -30.444830  ...       12.394645        1.318865       -2.742807   \n","4       7.896756  ...        0.339665       15.046800       -5.795148   \n","\n","   MFCC_FEATURE14  MFCC_FEATURE15  MFCC_FEATURE16  MFCC_FEATURE17  \\\n","0       11.989037       19.498587        7.052562        9.337797   \n","1       -0.831499       -4.859813       -6.505798        1.650652   \n","2      -10.681597        0.401939       -5.977624       -9.081145   \n","3      -11.067832       -3.199846       -2.017554        1.189839   \n","4        8.685557      -10.877573        2.194944        0.203273   \n","\n","   MFCC_FEATURE18  MFCC_FEATURE19           category  \n","0      -15.039810       -9.735036   Aedes sierrensis  \n","1       -1.188258       -0.830418   Aedes sierrensis  \n","2        1.459209       -5.074027    Anopheles dirus  \n","3       -8.552246       -0.050938   Aedes sierrensis  \n","4       -0.169427        6.405621  Anopheles farauti  \n","\n","[5 rows x 28 columns]"],"text/html":["\n","  <div id=\"df-f8c8e0c0-db87-41c5-9614-5c988ed64054\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>TEMPO</th>\n","      <th>BEATS</th>\n","      <th>RMSE</th>\n","      <th>SPECTRAL_CENTROID</th>\n","      <th>SPECTRAL_BANDWIDTH</th>\n","      <th>ROLLOFF</th>\n","      <th>ZERO_CROSSING_RATE</th>\n","      <th>MFCC_FEATURE0</th>\n","      <th>MFCC_FEATURE1</th>\n","      <th>MFCC_FEATURE2</th>\n","      <th>...</th>\n","      <th>MFCC_FEATURE11</th>\n","      <th>MFCC_FEATURE12</th>\n","      <th>MFCC_FEATURE13</th>\n","      <th>MFCC_FEATURE14</th>\n","      <th>MFCC_FEATURE15</th>\n","      <th>MFCC_FEATURE16</th>\n","      <th>MFCC_FEATURE17</th>\n","      <th>MFCC_FEATURE18</th>\n","      <th>MFCC_FEATURE19</th>\n","      <th>category</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.000000</td>\n","      <td>0</td>\n","      <td>0.000761</td>\n","      <td>3300.212400</td>\n","      <td>3175.473868</td>\n","      <td>8182.617188</td>\n","      <td>0.072591</td>\n","      <td>-547.82650</td>\n","      <td>61.259228</td>\n","      <td>-20.047228</td>\n","      <td>...</td>\n","      <td>-6.872621</td>\n","      <td>-10.328343</td>\n","      <td>5.868352</td>\n","      <td>11.989037</td>\n","      <td>19.498587</td>\n","      <td>7.052562</td>\n","      <td>9.337797</td>\n","      <td>-15.039810</td>\n","      <td>-9.735036</td>\n","      <td>Aedes sierrensis</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>117.453835</td>\n","      <td>3</td>\n","      <td>0.000850</td>\n","      <td>1878.108104</td>\n","      <td>2463.478567</td>\n","      <td>4181.515255</td>\n","      <td>0.051962</td>\n","      <td>-587.12634</td>\n","      <td>109.567670</td>\n","      <td>0.621466</td>\n","      <td>...</td>\n","      <td>12.889715</td>\n","      <td>7.382972</td>\n","      <td>7.868042</td>\n","      <td>-0.831499</td>\n","      <td>-4.859813</td>\n","      <td>-6.505798</td>\n","      <td>1.650652</td>\n","      <td>-1.188258</td>\n","      <td>-0.830418</td>\n","      <td>Aedes sierrensis</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>86.132812</td>\n","      <td>16</td>\n","      <td>0.000470</td>\n","      <td>1006.429351</td>\n","      <td>943.974019</td>\n","      <td>2163.357837</td>\n","      <td>0.059460</td>\n","      <td>-714.72750</td>\n","      <td>160.035540</td>\n","      <td>-27.784899</td>\n","      <td>...</td>\n","      <td>-11.861855</td>\n","      <td>5.109736</td>\n","      <td>-0.966423</td>\n","      <td>-10.681597</td>\n","      <td>0.401939</td>\n","      <td>-5.977624</td>\n","      <td>-9.081145</td>\n","      <td>1.459209</td>\n","      <td>-5.074027</td>\n","      <td>Anopheles dirus</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>107.666016</td>\n","      <td>4</td>\n","      <td>0.000764</td>\n","      <td>3259.906532</td>\n","      <td>2694.057893</td>\n","      <td>6470.488281</td>\n","      <td>0.163959</td>\n","      <td>-562.85050</td>\n","      <td>46.287365</td>\n","      <td>-30.444830</td>\n","      <td>...</td>\n","      <td>12.394645</td>\n","      <td>1.318865</td>\n","      <td>-2.742807</td>\n","      <td>-11.067832</td>\n","      <td>-3.199846</td>\n","      <td>-2.017554</td>\n","      <td>1.189839</td>\n","      <td>-8.552246</td>\n","      <td>-0.050938</td>\n","      <td>Aedes sierrensis</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>117.453835</td>\n","      <td>47</td>\n","      <td>0.003900</td>\n","      <td>2263.749841</td>\n","      <td>2585.921411</td>\n","      <td>5826.431435</td>\n","      <td>0.038568</td>\n","      <td>-488.63882</td>\n","      <td>97.426110</td>\n","      <td>7.896756</td>\n","      <td>...</td>\n","      <td>0.339665</td>\n","      <td>15.046800</td>\n","      <td>-5.795148</td>\n","      <td>8.685557</td>\n","      <td>-10.877573</td>\n","      <td>2.194944</td>\n","      <td>0.203273</td>\n","      <td>-0.169427</td>\n","      <td>6.405621</td>\n","      <td>Anopheles farauti</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 28 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f8c8e0c0-db87-41c5-9614-5c988ed64054')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f8c8e0c0-db87-41c5-9614-5c988ed64054 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f8c8e0c0-db87-41c5-9614-5c988ed64054');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-cfd09632-9167-4888-801c-08af01d20393\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cfd09632-9167-4888-801c-08af01d20393')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-cfd09632-9167-4888-801c-08af01d20393 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data_train"}},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","source":["### Encoding Labels"],"metadata":{"id":"2gXakmvncLl8"}},{"cell_type":"code","source":["# labels are there as string otherwise words\n","# need to convert the labels into numbers\n","print(data_train[\"category\"].value_counts())\n","LABELS = list(data_train[\"category\"].unique())\n","# sort the labels\n","LABELS.sort()\n","print(LABELS)"],"metadata":{"id":"a2-9NY2RcLL5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718875145169,"user_tz":-330,"elapsed":477,"user":{"displayName":"Shree krishna Ganguri","userId":"00482741206815251819"}},"outputId":"7a53f8e1-b6bb-4320-ac6a-63c01a838839"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["category\n","Aedes sierrensis             90\n","Anopheles farauti            15\n","Anopheles dirus              13\n","Culiseta incidens             6\n","Anopheles atroparvus          2\n","Anopheles quadrimaculatus     1\n","Name: count, dtype: int64\n","['Aedes sierrensis', 'Anopheles atroparvus', 'Anopheles dirus', 'Anopheles farauti', 'Anopheles quadrimaculatus', 'Culiseta incidens']\n"]}]},{"cell_type":"markdown","source":["### Encoding Structure\n","- We are encoding the labels in alphabetical order.\n","- electric_guitar gets 0 while piano gets 1."],"metadata":{"id":"g8BIOS3tc4a-"}},{"cell_type":"code","source":["# convert into numbers\n","data_train[\"category\"] = pd.factorize(data_train[\"category\"], sort = True)[0]\n","data_train[\"category\"].value_counts()"],"metadata":{"id":"3YuTvBrhcdPp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718875153262,"user_tz":-330,"elapsed":453,"user":{"displayName":"Shree krishna Ganguri","userId":"00482741206815251819"}},"outputId":"538eb891-61ea-498a-e759-236e27bd8402"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["category\n","0    90\n","3    15\n","2    13\n","5     6\n","1     2\n","4     1\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["### Seperate features and labels\n","- Label is at the last index which we can reference by -1"],"metadata":{"id":"8DMnRrFQaBRf"}},{"cell_type":"code","source":["# get all features without the labels\n","# all the rows\n","# all the columns without the last column\n","X = data_train.iloc[:, :-1].values\n","# all rows\n","# only the lastb column, which is the label\n","Y = data_train.iloc[:, -1].values"],"metadata":{"id":"KSqIZACfZ26N"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Train the Model using Cross Validation"],"metadata":{"id":"NiB8dna9bo3B"}},{"cell_type":"code","source":["from sklearn.model_selection import KFold\n","from sklearn.metrics import accuracy_score, precision_score, recall_score\n","import numpy as np\n","\n","def cross_validation(model, data = (X, Y), splits = 5):\n","    kf = KFold(n_splits=splits, shuffle=True, random_state=42)\n","\n","    # Perform k-fold cross-validation\n","    accuracy = []\n","    precision = []\n","    recall = []\n","\n","    for train_index, valid_index in kf.split(data[0]):\n","        X_train, X_valid = data[0][train_index], data[0][valid_index]\n","        y_train, y_valid = data[1][train_index], data[1][valid_index]\n","\n","        # Fit the defined model\n","        model.fit(X_train,y_train)\n","\n","        # Make predictions on the test data\n","        y_pred = model.predict(X_valid)\n","\n","        # Calculate accuracy, precision and recall\n","        accuracy.append(accuracy_score(y_pred, y_valid))\n","        precision.append(precision_score(y_pred, y_valid,  average = \"macro\"))\n","        recall.append(recall_score(y_pred, y_valid,  average = \"macro\"))\n","\n","\n","    # get arrays\n","    accuracy_set = np.array(accuracy)\n","    precision_set = np.array(precision)\n","    recall_set = np.array(recall)\n","\n","    print(\"Mean Accuracy: {}\".format(accuracy_set.mean()))\n","    print(\"Mean Precision: {}\".format(precision_set.mean()))\n","    print(\"Mean Recall: {}\".format(recall_set.mean()))"],"metadata":{"id":"a5_vkXLMabZL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Logistic Regression"],"metadata":{"id":"tuNt3Cr6mM7L"}},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","\n","# fit the logistic regression\n","lr = LogisticRegression()\n","\n","cross_validation(lr)"],"metadata":{"id":"F1WXgwptmPc6","executionInfo":{"status":"ok","timestamp":1718875507838,"user_tz":-330,"elapsed":494,"user":{"displayName":"Shree krishna Ganguri","userId":"00482741206815251819"}},"outputId":"c43b0259-682f-4449-90b4-6e855fae2b13","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Mean Accuracy: 0.7095384615384616\n","Mean Precision: 0.3341571844048624\n","Mean Recall: 0.365509324009324\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"markdown","source":["### KNN"],"metadata":{"id":"JHa3J7QacGM7"}},{"cell_type":"code","source":["from sklearn.neighbors import KNeighborsClassifier\n","\n","# Use 5-fold cross validation for hyper-parameter tuning\n","# Try out different values and choose the best hyper-parameters\n","knn = KNeighborsClassifier(n_neighbors=10)\n","\n","cross_validation(knn)"],"metadata":{"id":"Uf8phNY0bnWh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718875520878,"user_tz":-330,"elapsed":469,"user":{"displayName":"Shree krishna Ganguri","userId":"00482741206815251819"}},"outputId":"4360491d-ed5d-4e9b-d0e7-264125357ea1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Accuracy: 0.6630769230769231\n","Mean Precision: 0.3278503075871497\n","Mean Recall: 0.2687222222222222\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"markdown","source":["### Random Forest"],"metadata":{"id":"DeuiCypgmhG2"}},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","\n","# Use 5-fold cross validation for hyper-parameter tuning\n","# Try out different values and choose the best hyper-parameters\n","rf = RandomForestClassifier()\n","\n","\n","cross_validation(rf)"],"metadata":{"id":"nLqScr92mlC1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718875526984,"user_tz":-330,"elapsed":1277,"user":{"displayName":"Shree krishna Ganguri","userId":"00482741206815251819"}},"outputId":"ed577b25-8f2e-4b0a-ab6e-c3cce3c26cca"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Mean Accuracy: 0.7489230769230769\n","Mean Precision: 0.40564850182497236\n","Mean Recall: 0.398612909278544\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"markdown","source":["### Fit the best model\n","\n","- Select the best model having the highest cross validation accuracy"],"metadata":{"id":"oZXfRpcgm6lC"}},{"cell_type":"code","source":["# Model with the lowest RMSE or highest r2\n","best_model = RandomForestClassifier()\n","\n","# Fit the model on the full training dataset\n","best_model.fit(X, Y)"],"metadata":{"id":"fjYmgy_Rm71f","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1718875678982,"user_tz":-330,"elapsed":756,"user":{"displayName":"Shree krishna Ganguri","userId":"00482741206815251819"}},"outputId":"7555dd6a-1a34-4efa-f75f-908c066802e7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier()"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["### Load the test data"],"metadata":{"id":"uFFO9-FunNo1"}},{"cell_type":"code","source":["# load the test data\n","data_test = pd.read_csv(TEST_CSV)\n","data_test.head()"],"metadata":{"id":"UQ4DhtLsnPNP","colab":{"base_uri":"https://localhost:8080/","height":342},"executionInfo":{"status":"ok","timestamp":1718875705644,"user_tz":-330,"elapsed":1508,"user":{"displayName":"Shree krishna Ganguri","userId":"00482741206815251819"}},"outputId":"32148f00-b007-4b5d-9e55-847f1a0dcda9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        TEMPO  BEATS      RMSE  SPECTRAL_CENTROID  SPECTRAL_BANDWIDTH  \\\n","0  123.046875     39  0.002526        2451.434423         2725.005913   \n","1  184.570312     29  0.003240        2570.284939         2612.515791   \n","2   86.132812     10  0.000836        2783.130015         2665.891375   \n","3  107.666016     13  0.001787        3151.146369         2867.297562   \n","4   80.749512      7  0.000736        3450.724429         2834.025280   \n","\n","       ROLLOFF  ZERO_CROSSING_RATE  MFCC_FEATURE0  MFCC_FEATURE1  \\\n","0  5818.097745            0.111782     -453.32764      96.487144   \n","1  5612.270508            0.123551     -430.50894      82.389850   \n","2  5839.234909            0.163678     -547.50366      76.592155   \n","3  6682.235664            0.117366     -507.54950      59.283947   \n","4  7045.952923            0.252084     -557.59360      53.234770   \n","\n","   MFCC_FEATURE2  ...  MFCC_FEATURE11  MFCC_FEATURE12  MFCC_FEATURE13  \\\n","0       3.593859  ...       -5.465880       -8.192643       -4.444278   \n","1      -3.069812  ...       -7.958369      -10.645642       -4.107404   \n","2     -18.652302  ...       -3.312159       -7.698995       -4.880415   \n","3      -4.671752  ...       -7.831537      -12.652339       -4.302454   \n","4     -25.436134  ...        3.937785       -1.638796        2.261770   \n","\n","   MFCC_FEATURE14  MFCC_FEATURE15  MFCC_FEATURE16  MFCC_FEATURE17  \\\n","0       -9.294623       -8.165817      -14.458736       -9.026330   \n","1       -6.290764      -10.570796      -21.759610      -10.266810   \n","2       -5.055656        3.908271        0.370544        6.751074   \n","3       -3.074965        2.841742       -2.606913       -2.471106   \n","4       -1.138571        5.031303       -3.275972        2.486864   \n","\n","   MFCC_FEATURE18  MFCC_FEATURE19           category  \n","0       -3.742053       -2.105674  Anopheles farauti  \n","1       -1.054843        1.927806  Anopheles farauti  \n","2       -0.826916       -4.176763   Aedes sierrensis  \n","3       -9.154226       -5.626320   Aedes sierrensis  \n","4       -1.891750        1.515643   Aedes sierrensis  \n","\n","[5 rows x 28 columns]"],"text/html":["\n","  <div id=\"df-9727aaf0-6ead-4c6e-bd87-e8ceb689eadc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>TEMPO</th>\n","      <th>BEATS</th>\n","      <th>RMSE</th>\n","      <th>SPECTRAL_CENTROID</th>\n","      <th>SPECTRAL_BANDWIDTH</th>\n","      <th>ROLLOFF</th>\n","      <th>ZERO_CROSSING_RATE</th>\n","      <th>MFCC_FEATURE0</th>\n","      <th>MFCC_FEATURE1</th>\n","      <th>MFCC_FEATURE2</th>\n","      <th>...</th>\n","      <th>MFCC_FEATURE11</th>\n","      <th>MFCC_FEATURE12</th>\n","      <th>MFCC_FEATURE13</th>\n","      <th>MFCC_FEATURE14</th>\n","      <th>MFCC_FEATURE15</th>\n","      <th>MFCC_FEATURE16</th>\n","      <th>MFCC_FEATURE17</th>\n","      <th>MFCC_FEATURE18</th>\n","      <th>MFCC_FEATURE19</th>\n","      <th>category</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>123.046875</td>\n","      <td>39</td>\n","      <td>0.002526</td>\n","      <td>2451.434423</td>\n","      <td>2725.005913</td>\n","      <td>5818.097745</td>\n","      <td>0.111782</td>\n","      <td>-453.32764</td>\n","      <td>96.487144</td>\n","      <td>3.593859</td>\n","      <td>...</td>\n","      <td>-5.465880</td>\n","      <td>-8.192643</td>\n","      <td>-4.444278</td>\n","      <td>-9.294623</td>\n","      <td>-8.165817</td>\n","      <td>-14.458736</td>\n","      <td>-9.026330</td>\n","      <td>-3.742053</td>\n","      <td>-2.105674</td>\n","      <td>Anopheles farauti</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>184.570312</td>\n","      <td>29</td>\n","      <td>0.003240</td>\n","      <td>2570.284939</td>\n","      <td>2612.515791</td>\n","      <td>5612.270508</td>\n","      <td>0.123551</td>\n","      <td>-430.50894</td>\n","      <td>82.389850</td>\n","      <td>-3.069812</td>\n","      <td>...</td>\n","      <td>-7.958369</td>\n","      <td>-10.645642</td>\n","      <td>-4.107404</td>\n","      <td>-6.290764</td>\n","      <td>-10.570796</td>\n","      <td>-21.759610</td>\n","      <td>-10.266810</td>\n","      <td>-1.054843</td>\n","      <td>1.927806</td>\n","      <td>Anopheles farauti</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>86.132812</td>\n","      <td>10</td>\n","      <td>0.000836</td>\n","      <td>2783.130015</td>\n","      <td>2665.891375</td>\n","      <td>5839.234909</td>\n","      <td>0.163678</td>\n","      <td>-547.50366</td>\n","      <td>76.592155</td>\n","      <td>-18.652302</td>\n","      <td>...</td>\n","      <td>-3.312159</td>\n","      <td>-7.698995</td>\n","      <td>-4.880415</td>\n","      <td>-5.055656</td>\n","      <td>3.908271</td>\n","      <td>0.370544</td>\n","      <td>6.751074</td>\n","      <td>-0.826916</td>\n","      <td>-4.176763</td>\n","      <td>Aedes sierrensis</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>107.666016</td>\n","      <td>13</td>\n","      <td>0.001787</td>\n","      <td>3151.146369</td>\n","      <td>2867.297562</td>\n","      <td>6682.235664</td>\n","      <td>0.117366</td>\n","      <td>-507.54950</td>\n","      <td>59.283947</td>\n","      <td>-4.671752</td>\n","      <td>...</td>\n","      <td>-7.831537</td>\n","      <td>-12.652339</td>\n","      <td>-4.302454</td>\n","      <td>-3.074965</td>\n","      <td>2.841742</td>\n","      <td>-2.606913</td>\n","      <td>-2.471106</td>\n","      <td>-9.154226</td>\n","      <td>-5.626320</td>\n","      <td>Aedes sierrensis</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>80.749512</td>\n","      <td>7</td>\n","      <td>0.000736</td>\n","      <td>3450.724429</td>\n","      <td>2834.025280</td>\n","      <td>7045.952923</td>\n","      <td>0.252084</td>\n","      <td>-557.59360</td>\n","      <td>53.234770</td>\n","      <td>-25.436134</td>\n","      <td>...</td>\n","      <td>3.937785</td>\n","      <td>-1.638796</td>\n","      <td>2.261770</td>\n","      <td>-1.138571</td>\n","      <td>5.031303</td>\n","      <td>-3.275972</td>\n","      <td>2.486864</td>\n","      <td>-1.891750</td>\n","      <td>1.515643</td>\n","      <td>Aedes sierrensis</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 28 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9727aaf0-6ead-4c6e-bd87-e8ceb689eadc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9727aaf0-6ead-4c6e-bd87-e8ceb689eadc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9727aaf0-6ead-4c6e-bd87-e8ceb689eadc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5bae9e50-1f29-43d3-8156-f7bc521b25dc\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5bae9e50-1f29-43d3-8156-f7bc521b25dc')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5bae9e50-1f29-43d3-8156-f7bc521b25dc button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data_test"}},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","source":["### Encode the test data as well"],"metadata":{"id":"c2zC3BOLqczw"}},{"cell_type":"code","source":["# encode the labels\n","data_test[\"category\"] = pd.factorize(data_test[\"category\"], sort = True)[0]\n","data_test[\"category\"].value_counts()"],"metadata":{"id":"Hs3NWnpkoYT-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718875710490,"user_tz":-330,"elapsed":518,"user":{"displayName":"Shree krishna Ganguri","userId":"00482741206815251819"}},"outputId":"2bfd2907-a8da-4965-a80a-ecb718082527"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["category\n","0    353\n","2     60\n","3     48\n","6     31\n","4      5\n","5      5\n","1      5\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","source":["### Seperate features and labels"],"metadata":{"id":"U5awlupfqfYY"}},{"cell_type":"code","source":["# all the rows\n","# all the columns without the last column\n","x_test = data_test.iloc[:, : -1]\n","# all rows\n","# only the lastb column, which is the label\n","y_test = data_test.iloc[:, -1]"],"metadata":{"id":"X9-2tBt8nWuU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Use the best model to make predictions"],"metadata":{"id":"NI8BrkzJq1Wz"}},{"cell_type":"code","source":["# make predictions\n","predictions = best_model.predict(x_test)\n","print(predictions)"],"metadata":{"id":"aCc0qiosq3bb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718875840033,"user_tz":-330,"elapsed":475,"user":{"displayName":"Shree krishna Ganguri","userId":"00482741206815251819"}},"outputId":"210e2d55-4c80-4864-a422-e94315717098"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2 0 0 0 0 2 0 0 0 5 0 0 0 0 0 3 0 0 0 0 3 5 0 0 0 0 0 0 0 0 3 2 5 2 2 0 0\n"," 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 2 0 5 0 0 0 0 2 0 5 0 3 0 0 0 0 3 0 0 0\n"," 0 0 3 5 0 0 2 2 0 0 0 0 0 0 0 0 0 3 0 0 3 0 0 0 0 0 0 0 0 0 2 0 3 2 0 0 0\n"," 0 0 2 0 0 0 0 0 0 0 0 0 1 0 3 0 0 0 0 0 1 0 0 2 0 2 0 3 0 0 0 0 3 3 0 0 0\n"," 3 3 0 0 0 0 0 0 3 0 0 0 0 0 0 5 2 0 0 0 0 0 0 0 0 0 2 0 0 2 0 3 0 0 0 2 0\n"," 0 3 0 0 0 0 0 0 3 0 0 3 0 0 0 0 0 0 0 5 2 0 0 0 0 0 3 0 3 0 0 2 2 0 0 0 0\n"," 0 0 0 3 0 5 0 0 0 0 0 0 0 0 0 0 0 0 3 0 2 1 0 2 3 0 3 0 0 0 0 0 2 0 0 3 0\n"," 0 0 0 0 5 0 0 0 0 3 0 0 3 0 0 0 0 0 0 3 0 0 0 0 2 0 3 0 0 0 0 2 0 0 0 0 3\n"," 0 2 0 3 0 0 0 5 1 4 3 3 0 0 0 5 0 0 0 0 0 0 3 0 0 0 0 5 0 2 0 2 2 0 0 0 0\n"," 0 3 3 0 5 0 0 2 0 0 0 4 0 0 2 0 0 0 2 0 0 0 0 3 0 0 0 0 2 0 0 0 0 0 2 3 2\n"," 0 3 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 2 3 0 0 0 0 0 0 0 0 5 2 2 0 0 0 0 0 0 0\n"," 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 3 5 0 0 2 0 2 0 0 0 2 1 0 0 3 0 0 0 0 0 0 0\n"," 0 0 0 0 0 0 0 3 0 2 0 0 5 1 0 3 2 0 0 0 0 0 3 2 0 0 0 0 0 0 0 0 0 0 2 0 0\n"," 1 0 0 2 0 3 0 0 0 3 0 0 0 0 0 0 0 2 2 2 0 0 0 0 0 0]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:432: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n","  warnings.warn(\n"]}]},{"cell_type":"markdown","source":["### Evaluate the test data"],"metadata":{"id":"qmT4zo0krAeT"}},{"cell_type":"code","source":["#evaluation function\n","\n","def model_evaluations(y_true, y_pred, labels):\n","  import matplotlib.pyplot as plt\n","  import seaborn as sns\n","  from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n","\n","  acc_score = accuracy_score(y_true, y_pred)\n","  print(\"Accuracy score: {}\\n\".format(acc_score))\n","\n","  print(\"Classification Report: {}\".format(classification_report(y_true, y_pred)))\n","\n","  plt.figure(figsize = (10,10))\n","  sns.heatmap(confusion_matrix(y_true, y_pred),  annot = True, fmt=\"g\", cmap = \"Blues\", xticklabels = labels, yticklabels = labels)\n","  plt.title(\"Consfuion Matrix\")\n","  plt.show()\n"],"metadata":{"id":"CoZTbD-1q80i"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Record these results in a document\n","\n","- Better to save the results in google document"],"metadata":{"id":"LQxiGYMTyEgv"}},{"cell_type":"code","source":["# run the evaluation functions\n","model_evaluations(y_test, predictions, LABELS )"],"metadata":{"id":"gfssPUtStA9s","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1718875960382,"user_tz":-330,"elapsed":2502,"user":{"displayName":"Shree krishna Ganguri","userId":"00482741206815251819"}},"outputId":"b5ff2e6e-b704-4b22-b154-0a6e864b669e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy score: 0.8106508875739645\n","\n","Classification Report:               precision    recall  f1-score   support\n","\n","           0       0.92      0.98      0.95       353\n","           1       0.43      0.60      0.50         5\n","           2       0.63      0.55      0.59        60\n","           3       0.56      0.58      0.57        48\n","           4       0.00      0.00      0.00         5\n","           5       0.00      0.00      0.00         5\n","           6       0.00      0.00      0.00        31\n","\n","    accuracy                           0.81       507\n","   macro avg       0.36      0.39      0.37       507\n","weighted avg       0.77      0.81      0.79       507\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x1000 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### Save the best model\n","\n","- Make sure to donwload the model when you are planning to use the model later.\n","- Create a folder called **models** inside the folder you create for the course."],"metadata":{"id":"Y96cMnp_uyJu"}},{"cell_type":"code","source":["import pickle\n","import os\n","\n","# define the save folde name\n","SAVE_FOLDER = \"/content/drive/MyDrive/AIClub_AP_Shree_Krishna /CodeLab/Mosquito Project\"\n","MODEL_NAME = \"mosquito_feature_extracted_best_model\"\n","\n","# save the model\n","fh = open(os.path.join(SAVE_FOLDER, MODEL_NAME), \"wb\")\n","pickle.dump(best_model, fh)\n","fh.close()"],"metadata":{"id":"MQqy9yzruzxk"},"execution_count":null,"outputs":[]}]}